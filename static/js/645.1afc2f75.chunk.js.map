{"version":3,"file":"static/js/645.1afc2f75.chunk.js","mappings":"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","sources":["components/Loader/Loader.jsx","components/LoginForm/LoginForm.styled.jsx","components/LoginForm/index.jsx","redux/login/selectors.jsx","pages/Login/loginPage.styled.jsx","pages/Login/index.jsx","hooks/useAuth.jsx"],"sourcesContent":["import { Box } from 'components/Box';\nimport { ProgressBar } from 'react-loader-spinner';\n\nexport default function Loader() {\n  return (\n    <Box display=\"flex\" justifyContent=\"center\">\n      <ProgressBar\n        height=\"80\"\n        width=\"80\"\n        ariaLabel=\"progress-bar-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"progress-bar-wrapper\"\n        borderColor=\"#3d3d3d\"\n        barColor=\"#777777\"\n      />\n    </Box>\n  );\n}\n","import { Field, Form } from 'formik';\nimport styled from '@emotion/styled';\n\nexport const FormLogIn = styled(Form)`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  gap: 76px;\n\n  @media screen and (min-width: 768px) {\n    align-items: start;\n    gap: 60px;\n  }\n`;\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  color: ${p => p.theme.colors.textFirst};\n  font-size: ${p => p.theme.fontSizes.s};\n  font-weight: ${p => p.theme.fontWeights.bold};\n  width: 280px;\n`;\n\nexport const Input = styled(Field)`\n  border: none;\n  border-bottom: 1px solid #e0e0e0;\n  outline-color: ${p => p.theme.colors.accent};\n  width: 280px;\n  height: 20px;\n`;\n\nexport const ErrorText = styled.p`\n  color: red;\n  width: 100%;\n  text-align: justify;\n`;\n","import { useDispatch } from 'react-redux';\nimport { Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { FormLogIn, Input, Label, ErrorText } from './LoginForm.styled';\nimport { logIn } from 'redux/login/operations';\nimport { ButtonAuth, ButtonLinkAuth } from 'components/Button';\nimport { Link } from 'react-router-dom';\nimport { Box } from 'components/Box';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst FormError = ({ name }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <ErrorText>{message}</ErrorText>}\n    />\n  );\n};\n\nconst schema = yup.object().shape({\n  email: yup\n    .string()\n    .email('Please enter a valid email')\n    .required('Email is a required field'),\n  password: yup\n    .string()\n    .min(3, 'Password must be at least 3 characters')\n    .max(8, 'Password must be at most 8 characters')\n    .required('Password is a required field'),\n});\n\nconst initialValues = {\n  email: '',\n  password: '',\n};\n\nexport const FormLogin = () => {\n  const dispatch = useDispatch();\n  const handleSubmit = ({ email, password }, { resetForm }) => {\n    dispatch(logIn({ email, password }));\n    resetForm();\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        validationSchema={schema}\n      >\n        <FormLogIn autoComplete=\"off\">\n          <Box\n            display=\"flex\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            mt=\"55px\"\n            gridGap=\"40px\"\n          >\n            <Label htmlFor=\"email\">\n              Email *<Input type=\"email\" name=\"email\"></Input>\n              <FormError name=\"email\" component=\"p\" />\n            </Label>\n            <Label htmlFor=\"password\">\n              Password *<Input type=\"password\" name=\"password\"></Input>\n              <FormError name=\"password\" component=\"p\" />\n            </Label>\n          </Box>\n          <Box\n            display=\"flex\"\n            flexDirection={['column', 'row']}\n            alignItems=\"center\"\n            gridGap={['20px', '32px']}\n          >\n            <ButtonAuth text=\"Log in\"></ButtonAuth>\n            <Link to=\"/registration\">\n              <ButtonLinkAuth text=\"Register\"></ButtonLinkAuth>\n            </Link>\n          </Box>\n        </FormLogIn>\n      </Formik>\n    </>\n  );\n};\n","export const selectIsLoading = state => state.login.isLoading;\n\nexport const selectUser = state => state.login.user;\n\nexport const selectIsLoggedIn = state => state.login.isLoggedIn;\n","import styled from '@emotion/styled';\n\nexport const LoginPage = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 40px 0;\n  width: 100%;\n\n  @media screen and (min-width: 768px) {\n    display: flex;\n    flex-direction: column;\n    align-items: start;\n    padding: 160px 0;\n  }\n`;\n\nexport const TitleLogIn = styled.h1`\n  color: ${p => p.theme.colors.accent};\n  font-size: ${p => p.theme.fontSizes.s};\n`;\n","import Loader from 'components/Loader/Loader';\nimport { FormLogin } from 'components/LoginForm';\nimport { useAuth } from 'hooks/useAuth';\nimport { LoginPage, TitleLogIn } from './loginPage.styled';\n\nconst Login = () => {\n  const { isLoading } = useAuth();\n  return (\n    <LoginPage>\n      <TitleLogIn>LOG IN</TitleLogIn>\n      <FormLogin />\n      {isLoading && <Loader />}\n    </LoginPage>\n  );\n};\n\nexport default Login;\n","import { useSelector } from 'react-redux';\nimport {\n  selectUser,\n  selectIsLoading,\n  selectIsLoggedIn,\n} from 'redux/login/selectors';\n\nexport const useAuth = () => {\n  return {\n    user: useSelector(selectUser),\n    isLoading: useSelector(selectIsLoading),\n    isLoggedIn: useSelector(selectIsLoggedIn),\n  };\n};\n"],"names":["Loader","Box","display","justifyContent","height","width","ariaLabel","wrapperStyle","wrapperClass","borderColor","barColor","FormLogIn","styled","Form","Label","p","theme","colors","textFirst","fontSizes","s","fontWeights","bold","Input","Field","accent","ErrorText","FormError","name","render","message","schema","yup","shape","email","required","password","min","max","initialValues","FormLogin","dispatch","useDispatch","onSubmit","resetForm","logIn","validationSchema","autoComplete","flexDirection","alignItems","mt","gridGap","htmlFor","type","component","Button","text","to","selectIsLoading","state","login","isLoading","selectUser","user","selectIsLoggedIn","isLoggedIn","LoginPage","TitleLogIn","useSelector"],"sourceRoot":""}